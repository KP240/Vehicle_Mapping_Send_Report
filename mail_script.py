# -*- coding: utf-8 -*-
"""mail_script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/190G18oijGpsZzCbxTNayWUDfAO6ZcBYf
"""

import smtplib
import os
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

# SMTP Configuration
smtp_server = "smtp.gmail.com"
smtp_port = 587
username = "kartik@project-lithium.com"
password = "lpolrrwyvnffyynv"

# City-specific recipient groups
city_recipients = {
    'BLR': {'to': ['kartikpande12@gmail.com'], 'cc': ['sp.processadherance@project-lithium.com']},
    'NCR-GGN': {'to': ['kartikpande12@gmail.com'], 'cc': ['sp.processadherance@project-lithium.com']},
    'HYD': {'to': ['kartikpande12@gmail.com'], 'cc': ['sp.processadherance@project-lithium.com']},
}

# Base folder path for city-specific data
base_path = r"/content/cities"

def send_email(city, to_list=None, cc_list=None):
    # Create a MIMEMultipart object to represent the email
    msg = MIMEMultipart()
    msg['From'] = username
    msg['To'] = ', '.join(to_list)
    msg['Cc'] = ', '.join(cc_list)
    subject = f"16 Hrs & Trip Model - SP Vehicle Mapping for {city}"  # Unique subject for each city
    msg['Subject'] = subject

    # Email body
    body_html = """
    <html>
        <body>
            <p>Hi Team,</p>
            <p>Kindly share the Assigned Vehicle Number for 16hrs & Trip model SP's if there are any changes.</p>
            <p>Please find the attachment below.</p>
        </body>
    </html>
    """
    msg.attach(MIMEText(body_html, 'html'))

    # Check the appropriate folder for data files
    city_folder = os.path.join(base_path, city)
    print(f"Looking for files in: {city_folder}")

    # Find the correct data file based on the city's naming convention
    if city == 'NCR-GGN':
        data_files = [f for f in os.listdir(city_folder) if f.endswith('_data.csv') and 'NCR-GGN' in f]
    else:
        data_files = [f for f in os.listdir(city_folder) if f.endswith('_data.csv') and f.startswith(city)]

    if not data_files:
        print(f"No data files found for {city}. Email not sent.")
        return

    # Use the first matching data file
    data_file = os.path.join(city_folder, data_files[0])
    print(f"Data file found: {data_file}")

    # Attach the data file
    attach_file(msg, data_file)

    # Send the email
    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(username, password)
            server.sendmail(username, to_list + cc_list, msg.as_string())
        print(f"Email sent to {city.upper()} team.")
    except Exception as e:
        print(f"Failed to send email to {city.upper()} team. Error: {str(e)}")

def attach_file(msg, filepath):
    filename = os.path.basename(filepath)
    attachment = MIMEBase('application', 'octet-stream')
    with open(filepath, "rb") as f:
        attachment.set_payload(f.read())
    encoders.encode_base64(attachment)
    attachment.add_header('Content-Disposition', f"attachment; filename={filename}")
    msg.attach(attachment)

# Send emails for each city
for city, recipients in city_recipients.items():
    send_email(city, recipients['to'], recipients['cc'])